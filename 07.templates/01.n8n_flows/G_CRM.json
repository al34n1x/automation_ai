{
  "name": "G_CRM",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -560,
        -32
      ],
      "id": "a499bcdd-a22e-4dd7-8e67-30494e57745f",
      "name": "Telegram Trigger",
      "webhookId": "c6aff8db-4a2c-43cc-ada6-b8f5b16bbe6e",
      "credentials": {
        "telegramApi": {
          "id": "IcSOnEUcm0gcBPjo",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message.text }}",
        "options": {
          "systemMessage": "=You are the Master Coordinator Agent.\n\nGOAL\n- You receive messages from the user and decide how to handle them.\n- If the request is about retrieving customer information (for example: asking for a customer by name, email, or ID), you MUST call the Sub_WF_CRMSubworkflow.\n- For any other request, respond with: {\"action\":\"unsupported\"}.\n\nTOOLS\n- Sub_WF_CRM: A sub-agent that takes a customer identifier and returns a JSON object with the customer’s data in the format:\n  {\n    \"CustomerID\": \"\",\n    \"Name\": \"\",\n    \"Email\": \"\",\n    \"Phone\": \"\",\n    \"City\": \"\",\n    \"Status\": \"\",\n    \"Plan\": \"\",\n    \"TotalSpentUSD\": \"\"\n  }\n\nREQUIREMENTS\n1) Detect intent:\n   - If the user asks for a customer, pass the identifier (email, CustomerID, or name) to the Sub_WF_CRM.\n   - If the request is not customer-related, return {\"action\":\"unsupported\"}.\n2) When the Sub_WF_CRM returns the data, you must:\n   a) Forward the raw JSON object exactly as received.  \n   b) Parse the JSON object and generate an enriched text response that summarizes the customer data in natural language.  \n\nCRITICAL RULES\n- Always return: \n  1. The enriched human-readable summary text.  \n- The enriched text must use the values from the JSON, and should be professional and user-friendly.  \n- If the CRM returns empty values (customer not found), the enriched text must say clearly that no customer was found.  \n- Never include commentary, code fences, or explanations outside the defined outputs.\n\nEXAMPLES\n\nUser: \"Show me information for alice@mail.com\"  \nProcess: Call Sub_WF_CRM with email \"alice@mail.com\".  \nSubworkflow Response: {\"CustomerID\":\"CUST001\",\"Name\":\"Alice Johnson\",\"Email\":\"alice@mail.com\",\"Phone\":\"555-1001\",\"City\":\"New York\",\"Status\":\"Active\",\"Plan\":\"Premium\",\"TotalSpentUSD\":\"1200.50\"}  \nFinal Output example:  \nCustomer Alice Johnson (ID: CUST001) from New York is currently Active on the Premium plan. Contact: alice@mail.com, Phone: 555-1001. Total spent: $1200.50.\n\nUser: \"What promotions are available?\"  \nFinal Output:  \n{\"action\":\"unsupported\"}  \nText → This request is not supported by the coordinator agent.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -240,
        -32
      ],
      "id": "8639a67f-a1b0-467b-b7da-f092418e3947",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -352,
        192
      ],
      "id": "220bdfb3-3174-4a87-a6df-e3a15062a73f",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "51oN9QrCM5ZMZ1Zu",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "ITyg83UXePJpH8gB",
          "mode": "list",
          "cachedResultName": "Sub_WF_CRM"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        -16,
        224
      ],
      "id": "27857e20-1d18-4cec-8721-9d9a33920cae",
      "name": "Call n8n Workflow Tool"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.from.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        112,
        -32
      ],
      "id": "0badde94-7003-4028-83a6-1195ec44f82a",
      "name": "Send a text message",
      "webhookId": "d928f6ee-1167-46a7-b72e-52583fd22d7a",
      "credentials": {
        "telegramApi": {
          "id": "IcSOnEUcm0gcBPjo",
          "name": "Telegram account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Call n8n Workflow Tool": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "69237b7d-cf67-4fec-856f-722b0d72f437",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "21c01bb5c5f3f34d6e572cf61183391f18fedb8ad88d29888d48ec9c5f89b544"
  },
  "id": "7gpGN7qvHuoFg5uE",
  "tags": []
}