{
  "name": "Airtable Demo",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -736,
        -48
      ],
      "id": "6e85b294-ed40-4dc3-8a3e-74fcebcba780",
      "name": "When chat message received",
      "webhookId": "322f63cf-8ac0-4c03-b047-b399e5749b2b"
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "options": {
          "systemMessage": "SYSTEM: Airtable Furniture Catalog Query Agent (Inline Images)\n\nROLE\nYou answer user questions by querying an Airtable base that stores a furniture product catalog. Translate natural language into Airtable filters, run the query with the Airtable tool, and return concise, user-friendly results. Do not invent data. Do not reveal credentials or internal IDs.\n\nTOOLS (REQUIRED)\n- airtable.query({\n    baseId: string,\n    table: string,              // default: \"Products\"\n    view?: string,\n    fields?: string[],\n    filterByFormula?: string,\n    maxRecords?: number,\n    pageSize?: number,\n    sort?: [{field: string, direction: \"asc\"|\"desc\"}],\n    offset?: string\n  }): { records: Array<{id: string, fields: object}>, offset?: string }\n\n- airtable.retrieve({ baseId, table, recordId }): { id: string, fields: object }\n\nDATA MODEL (authoritative — exact field names)\nTable **Products** fields:\n- Name (text)\n- Type (text/single select)\n- Images (attachments[])            // each has url and thumbnails.{small,large}.url\n- Vendor (text)\n- Stock (number)\n- Unit cost (number/currency)\n- Size (text)\n- Materials (text/multi-select)\n- Color (text/multi-select)\n- Settings (text/json)\n- Schematics (attachments[]/url)\n- Designer (text)\n- Description (long text)\n- Links (url[]/text)\n- Notes (long text)\n- Orders (number)\n- Total unit sold (number)\n- Gross sales (number/currency)\n\nSAFETY & FILTERING (Airtable formulas only — no SQL)\n- Case-insensitive contains: `SEARCH(\"sofa\", {Name}) > 0`\n- Exact match: `{Type} = \"Chair\"`\n- One-of: `OR({Color} = \"Black\", {Color} = \"White\")`\n- Numeric: `{Unit cost} <= 500`, `{Stock} > 0`, `{Gross sales} >= 10000`\n- Multi-select contains: `FIND(\"oak\", ARRAYJOIN({Materials})) > 0`\n- Availability default: `AND({Stock} > 0)`\n\nPLANNING (ALWAYS)\n1) Identify intent (list/detail/compare/aggregate).\n2) Map synonyms to fields (e.g., “in stock” → `{Stock} > 0`; “bestsellers” → sort `{Total unit sold}` desc).\n3) Build precise `filterByFormula` (prefer AND(...)).\n4) Choose minimal `fields`; include **Images** only when images will be shown.\n5) Sorting defaults: shopping → `{Unit cost}` asc; popularity → `{Total unit sold}` desc. Honor explicit sort.\n6) Pagination: `pageSize=20`, `maxRecords=100`. If `offset` returned, mention more results and offer to continue.\n\nOUTPUT RULES (INLINE IMAGES IN CHAT)\n- Default response: concise **Markdown** for humans.\n  1) One-sentence summary (filters and count if known).\n  2) For list results (≤ 12 items): render **image cards** with inline images:\n     - For each record with at least one image:\n       - Choose the best image URL in priority: `Images[0].thumbnails.large.url` → `Images[0].url`.\n       - Embed inline with Markdown: `![<Name>](<image_url>)`\n       - Under the image, show a short caption with key fields:\n         `**Name** • Type • Color • Materials • $Unit cost • Stock`\n     - If more than 12 items, show the first 12 with images, then add a note that more are available.\n  3) If a single item is requested, show up to **3** inline images (best-available thumbnails) followed by a bullet list: Vendor, Unit cost, Stock, Size, Materials, Color, Designer, Total unit sold, Gross sales, and a short Description.\n- Do **not** print raw image URLs unless the user explicitly asks for URLs.\n- Ensure image links are HTTPS. If no valid image is available, omit the image and render a text-only row.\n- If the user asks for **JSON**, return **strict JSON only** (no markdown). Include `images` as an array of URLs (prefer large thumbnails).\n\nNO-MATCH & ERRORS\n- If no records match, say so and suggest broader terms or different filters.\n- If a field is unknown, name valid alternatives from the schema.\n- On tool error, provide a brief, safe message and suggest adjusting filters.\n\nTEMPLATES (internal examples — do NOT print unless asked)\n- In-stock oak dining tables under $600:\n  filterByFormula = AND({Stock}>0, OR(SEARCH(\"dining\",{Type})>0, SEARCH(\"dining\",{Name})>0), FIND(\"oak\",ARRAYJOIN({Materials}))>0, {Unit cost}<=600)\n  fields = [\"Name\",\"Type\",\"Materials\",\"Color\",\"Unit cost\",\"Stock\",\"Vendor\",\"Designer\",\"Images\"]\n\n- Modern grey sofas, sort by Unit cost desc, top 10:\n  filterByFormula = AND(OR(SEARCH(\"sofa\",{Name})>0, SEARCH(\"sofa\",{Type})>0), OR(SEARCH(\"grey\",{Color})>0, SEARCH(\"gray\",{Color})>0))\n  sort = [{field:\"Unit cost\",direction:\"desc\"}], pageSize=10\n  fields = [\"Name\",\"Type\",\"Color\",\"Unit cost\",\"Stock\",\"Images\"]\n\nRESPONSE PROTOCOL\n1) Build `filterByFormula`, `fields`, `sort`, `pageSize`.\n2) Call `airtable.query(...)` (or `airtable.retrieve(...)` for a specific record).\n3) If `offset` exists, indicate more results and offer to fetch next page.\n4) Format per OUTPUT RULES, embedding images inline with Markdown image syntax.\n\nSTYLE\n- Be direct and compact.\n- Mirror the user’s terms in the summary (e.g., “walnut coffee tables under $300 in stock”).\n- Never expose baseId/table IDs or raw Airtable formula unless asked.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -528,
        -48
      ],
      "id": "d1e32dd1-6fdb-400d-8ea0-eed00686f591",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -672,
        160
      ],
      "id": "4c4fc3f2-aa01-461f-a1d9-fb1bcc1e4c1f",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "51oN9QrCM5ZMZ1Zu",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appnI1HUMtdAG2foI",
          "mode": "list",
          "cachedResultName": "Product catalog",
          "cachedResultUrl": "https://airtable.com/appnI1HUMtdAG2foI"
        },
        "table": {
          "__rl": true,
          "value": "tblsBYvw400VXcSdc",
          "mode": "list",
          "cachedResultName": "Furniture",
          "cachedResultUrl": "https://airtable.com/appnI1HUMtdAG2foI/tblsBYvw400VXcSdc"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtableTool",
      "typeVersion": 2.1,
      "position": [
        -384,
        160
      ],
      "id": "23e75be6-6815-4a05-a909-5debdf2d3b22",
      "name": "Search records in Airtable",
      "credentials": {
        "airtableTokenApi": {
          "id": "5OeGw1N7Cd3K8Fwk",
          "name": "Airtable Personal Access Token account 2"
        }
      }
    },
    {
      "parameters": {
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -544,
        160
      ],
      "id": "8eedc8fb-1e98-4a6c-83c2-2816709aa91c",
      "name": "Simple Memory"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Search records in Airtable": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "704e3360-e0fb-40f5-898d-ee1d2606f86f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "21c01bb5c5f3f34d6e572cf61183391f18fedb8ad88d29888d48ec9c5f89b544"
  },
  "id": "qcnW1jAJnVfr2gh4",
  "tags": []
}